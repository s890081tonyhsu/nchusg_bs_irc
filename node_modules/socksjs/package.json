{
  "name": "socksjs",
  "version": "0.4.3",
  "description": "A SOCKS (v5) client library for node.js",
  "keywords": [
    "SOCKS",
    "SOCKS5",
    "SOCKS client",
    "client"
  ],
  "homepage": "https://github.com/M2Ys4U/socksjs",
  "bugs": {
    "url": "https://github.com/M2Ys4U/socksjs/issues"
  },
  "license": "MIT",
  "author": {
    "name": "Jack Allnutt",
    "email": "jack@allnutt.eu"
  },
  "main": "socks.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/M2Ys4U/socksjs.git"
  },
  "files": [
    "LICENSE",
    "README.markdown",
    "package.json",
    "socks.js"
  ],
  "engines": {
    "node": ">=0.10.0"
  },
  "dependencies": {
    "ipaddr.js": "0.1.1"
  },
  "readme": "socksjs\n=======\n\nA SOCKS (v5) client library for node.js\n\n## Installation ##\n\n`` $ npm install socksjs ``\n\n## API ##\n\n`` var SocksConnection = require('socksjs');``\n\nSocksConnection implements node's Duplex Stream. See the Node documentation for [Stream consumers](http://nodejs.org/api/stream.html#stream_api_for_stream_consumers) to see what methods and events are available in addition to those listed below.\n\n### Creating a new SocksConnection ###\n`` var sock = new SocksConnection(remote_options, sock_options); ``\n`` var sock = SocksConnection.connect(remote_options, sock_options, connect_handler);``\n\n**remote_options**\n* ``port`` - The port to connect to (mandatory)\n* ``host`` - The hostname or IP to connect to through the SOCKS proxy (optional, default: ``'localhost'``)\n* ``ssl`` - Connect using SSL (optional, default ``false``)\n* ``rejectUnauthorised`` - If ``true``, the server certificate is verified against the list of supplied CAs. An ``'error'`` event is emitted if verification fails (optional, default: ``false``)\n\n**socks_options**\n* ``localAddress`` - The local interface to bind to for the outgoing connections (optional, default: ``0.0.0.0``)\n* ``allowHalfOpen`` -  If ``true``, the socket won't automatically send a FIN packet when the other end of the socket sends a FIN packet. (optional, default: ``false``)\n* ``host`` - The hostname or IP of the SOCKS proxy (optional, default: ``localhost``)\n* ``port`` - The SOCKS proxy's port (optional, default: ``1080``)\n* ``user`` - The username to use to authenticate to the SOCKS proxy (optional, default: ``null``)\n* ``pass`` - The password to use to authenticate to the SOCKS proxy (optional, default: ``null``)\n\n**connection_listener**\n\nFunction to attach to the 'connect' event of the SocksConnection\n\n### Events ###\n#### ``connect`` ####\nSocksConnection will emit a ``connect`` event when it has successfully connected to the target host\n\n#### ``error`` ####\nSocksConnection will emit an ``error`` event if it cannot connect to the SOCKS proxy, target host or if there is an error during the connection's lifetime.\n\n## Contributing ##\n### Tests ###\nsocksjs needs tests. Pull requests with testcases are much appreciated.\n\n## License ##\nsocksjs (C) 2013 Jack Allnutt and is licensed under the [MIT license](http://opensource.org/licenses/MIT), a copy of which can be found in the LICENSE file.",
  "readmeFilename": "README.markdown",
  "_id": "socksjs@0.4.3",
  "dist": {
    "shasum": "0bad76d1dcc27e4d2e277fb41f1b6943843e00e5"
  },
  "_from": "socksjs@0.4.3",
  "_resolved": "https://registry.npmjs.org/socksjs/-/socksjs-0.4.3.tgz"
}
